* Copyright 2024 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2024-10-04
* https://github.com/Aleksandr3Bocharov/RefalABEinshteinPuzzle

*====================================================================
* RefalABEinshteinPuzzle
*
* Программа "RefalABEinshteinPuzzle" написана
* на языке программирования РефалАБ.
* https://github.com/Aleksandr3Bocharov/RefalAB
*
* Решение задачи Эйнштейна на РефалАБ.
* 
* Задача Эйнштейна.
* 
* Условия:
* 1. Есть 5 домов разных цветов.
* 2. В каждом доме живет по одному человеку,
* отличающегося от другого 
* по национальности.
* 3. Каждый обитатель пьет только один
* определенный напиток, курит определенную
* марку сигарет и держит животное.
* 4. Никто из пяти людей не пьет
* одинакового напитка, не курит одинаковые
* сигареты и не держит одинаковых животных.
* 
* Вопрос: Чья рыба?
* 
* Подсказки:
* 1.  Англичанин живет в красном доме.
* 2.  У шведа есть собака.
* 3.  Датчанин пьет чай.
* 4.  Зеленый дом стоит слева от белого.
* 5.  Обитатель зеленого дома пьет кофе.
* 6.  Человек, который курит Pall Mall, 
* держит птицу.
* 7.  Обитатель среднего дома пьет молоко.
* 8.  Обитатель желтого дома курит Dunhill.
* 9.  Норвежец живет в первом доме.
* 10. Курильщик Marlboro живет возле того,
* у кого есть кошка.
* 11. Человек, у которого есть конь,
* живет возле того, кто курит Dunhill.
* 12. Курильщик Winfield пьет пиво.
* 13. Норвежец живет возле голубого дома.
* 14. Немец курит Rothmans.
* 15. Курильщик Marlboro живет по соседству 
* с человеком, который пьет воду.
*====================================================================

            START
            ENTRY Go
            EMPTY Member
* from libRefalAB
            EXTRN Map, P1, Prout, Symb

* Вывод справки
Help        = <Prout 'Solution of the Einstein''s Puzzle ' + 
            'on RefalAB.\n\n' +
            'Einstein''s Puzzle.\n\n' +
            'Conditions:\n' +
            '1. There are 5 houses each of a different color.\n' +
            '2. One person lives in each house and the residents ' + 
            'each have different nationalities.\n' +
            '3. Each resident prefers a certain drink, smokes ' + 
            'a certain brand of cigarettes, ' + 
            'and has a certain house pet.\n' +
            '4. NONE of the five persons drinks the same drink, ' + 
            'smokes the same brand of cigarettes or has the same ' + 
            'house pet as any one of the other residents.\n\n' +
            'Question: Who has the fish?\n\n' +
            'The clues:\n' +
            '1.  The Englishman lives in the red house.\n' +
            '2.  The Swede has a dog.\n' +
            '3.  The Dane likes to drink tea.\n' +
            '4.  The green house is left of the white house.\n' +
            '5.  The resident in the green house drinks coffee.\n' +
            '6.  The person who smokes Pall Mall has a bird.\n' +
            '7.  The man who lives in the middle house drinks milk.\n' +
            '8.  The resident in the yellow house smokes Dunhill.\n' +
            '9.  The Norwegian lives in the first house.\n' +
            '10. The Marlboro smoker lives next to the person ' + 
            'with a cat.\n' +
            '11. The man who has a horse lives next to the person ' + 
            'who smokes Dunhill.\n' +
            '12. The Winfield smoker likes to drink beer.\n' +
            '13. The Norwegian lives next to the blue house.\n' +
            '14. The German smokes Rothmanns.\n' +
            '15. The Marlboro smoker has a neighbor who drinks water.' + 
            '\n\n'>

* <Rule S(/1/../16/)R> == S(/Member/ /Left/ /Nextto/)P VO VO | /Fish/
*
* VO ::= /Home/ S(/1/ /3/)H | /Color/ SC | /Nationality/ SN | 
*        /Cigarettes/ SS | /Pet/ SA | /Drink/ SD 
* SC ::= /Yellow/ | /Blue/ | /Red/ | /Green/ | /White/
* SN ::= /Norwegian/ | /Dane/ | /Englishman/ | /German/ | /Swede/
* SS ::= /Dunhill/ | /Rothmans/ | /PallMall/ | /Marlboro/ | /Winfield/
* SA ::= /Cat/ | /Horse/ | /Bird/ | /Dog/
* SD ::= /Water/ | /Tea/ | /Milk/ | /Coffee/ | /Beer/
Rule +
* 1. Англичанин живет в красном доме.
    /1/     = /Member/ /Color/ /Red/ /Nationality/ /Englishman/
* 2. У шведа есть собака. 
    /2/     = /Member/ /Nationality/ /Swede/ /Pet/ /Dog/
* 3. Датчанин пьет чай.
    /3/     = /Member/ /Nationality/ /Dane/ /Drink/ /Tea/
* 4. Зеленый дом стоит слева от белого. 
    /4/     = /Left/ /Color/ /Green/ /Color/ /White/
* 5. Обитатель зеленого дома пьет кофе. 
    /5/     = /Member/ /Color/ /Green/ /Drink/ /Coffee/
* 6. Человек, который курит Pall Mall,
* держит птицу. 
    /6/     = /Member/ /Cigarettes/ /PallMall/ /Pet/ /Bird/
* 7. Обитатель среднего дома пьет молоко. 
    /7/     = /Member/ /Home/ /3/ /Drink/ /Milk/
* 8. Обитатель желтого дома курит Dunhill. 
    /8/     = /Member/ /Color/ /Yellow/ /Cigarettes/ /Dunhill/
* 9. Норвежец живет в первом доме. 
    /9/     = /Member/ /Home/ /1/ /Nationality/ /Norwegian/
* 10. Курильщик Marlboro живет возле того,
* у кого есть кошка. 
    /10/    = /Nextto/ /Cigarettes/ /Marlboro/ /Pet/ /Cat/
* 11. Человек, у которого есть конь, 
* живет возле того, кто курит Dunhill. 
    /11/    = /Nextto/ /Pet/ /Horse/ /Cigarettes/ /Dunhill/
* 12. Курильщик Winfield пьет пиво. 
    /12/    = /Member/ /Cigarettes/ /Winfield/ /Drink/ /Beer/
* 13. Норвежец живет возле голубого дома. 
    /13/    = /Nextto/ /Nationality/ /Norwegian/ /Color/ /Blue/
* 14. Немец курит Rothmans. 
    /14/    = /Member/ /Nationality/ /German/ /Cigarettes/ /Rothmans/
* 15. Курильщик Marlboro живет по соседству
* с человеком, который пьет воду. 
    /15/    = /Nextto/ /Cigarettes/ /Marlboro/ /Drink/ /Water/
* 16. Рыба - пятое животное.
    /16/    = /Fish/    

* <RuleText S(/0/../16/)R> == VT
*
* VT ::= 'Conditions.' |
*        'The Englishman lives in the red house.' | 
*        'The Swede has a dog.' |
*        'The Dane likes to drink tea.' |
*        'The green house is left of the white house.' |
*        'The resident in the green house drinks coffee.' |
*        'The person who smokes Pall Mall has a bird.' |
*        'The man who lives in the middle house drinks milk.' |
*        'The resident in the yellow house smokes Dunhill.' |
*        'The Norwegian lives in the first house.' |
*        'The Marlboro smoker lives next to the person with a cat.' |
*        'The man who has a horse lives next to the person who smokes Dunhill.' |
*        'The Winfield smoker likes to drink beer.' |
*        'The Norwegian lives next to the blue house.' |
*        'The German smokes Rothmanns.' | 
*        'The Marlboro smoker has a neighbor who drinks water.' | 
*        'Fish is the fifth pet.'
RuleText +
    /0/     = 'Conditions.'
    /1/     = 'The Englishman lives in the red house.'
    /2/     = 'The Swede has a dog.'
    /3/     = 'The Dane likes to drink tea.'
    /4/     = 'The green house is left of the white house.'
    /5/     = 'The resident in the green house drinks coffee.'
    /6/     = 'The person who smokes Pall Mall has a bird.'
    /7/     = 'The man who lives in the middle house drinks milk.'
    /8/     = 'The resident in the yellow house smokes Dunhill.'
    /9/     = 'The Norwegian lives in the first house.'
    /10/    = 'The Marlboro smoker lives next to the person ' + 
            'with a cat.'
    /11/    = 'The man who has a horse lives next to the person ' + 
            'who smokes Dunhill'
    /12/    = 'The Winfield smoker likes to drink beer.'
    /13/    = 'The Norwegian lives next to the blue house.'
    /14/    = 'The German smokes Rothmanns.'
    /15/    = 'The Marlboro smoker has a neighbor who drinks water.'
    /16/    = 'Fish is the fifth pet.'

* <ObjectText SC VO> == VT
*
* SC ::= /Color/ | /Nationality/ | /Cigarettes/ | /Pet/ | /Drink/
* VO ::= '???' |
*        /Yellow/ | /Blue/ | /Red/ | /Green/ | /White/ |
*        /Norwegian/ | /Dane/ | /Englishman/ | /German/ | /Swede/ |
*        /Dunhill/ | /Rothmans/ | /PallMall/ | /Marlboro/| /Winfield/ |
*        /Cat/ | /Horse/ | /Bird/ | /Dog/ | /Fish/ |
*        /Water/ | /Tea/ | /Milk/ | /Coffee/ | /Beer/
* VT ::= '???' |
*        'Yellow' | 'Blue' | 'Red' | 'Green' | 'White' |
*        'Norwegian' | 'Dane' | 'Englishman' | 'German' | 'Swede' |
*        'Dunhill' | 'Rothmans' | 'Pall Mall' | 'Marlboro' | 'Winfield' |
*        'Cat' | 'Horse' | 'Bird' | 'Dog' | 'Fish' |
*        'Water' | 'Tea' | 'Milk' | 'Coffee' | 'Beer'
ObjectText +
    /Color/ '???' +
            = '???'
    /Nationality/ '???' +
            = '???'
    /Cigarettes/ '???' +
            = '???'
    /Pet/ '???' +
            = '???'
    /Drink/ '???' +
            = '???'
    SC SO   = <ObjectTextAux SO>

ObjectTextAux +
    /Yellow/ +
            = 'Yellow'
    /Blue/  = 'Blue'
    /Red/   = 'Red'
    /Green/ = 'Green'
    /White/ = 'White'     
    /Norwegian/ +
            = 'Norwegian' 
    /Dane/  = 'Dane'  
    /Englishman/ +
            = 'Englishman'
    /German/ +
            = 'German'
    /Swede/ = 'Swede'   
    /Dunhill/ +
            = 'Dunhill'
    /Rothmans/ +
            = 'Rothmans'
    /PallMall/ +
            = 'Pall Mall'
    /Marlboro/ +
            = 'Marlboro' 
    /Winfield/ +
            = 'Winfield'  
    /Cat/   = 'Cat'
    /Horse/ = 'Horse'
    /Bird/  = 'Bird'
    /Dog/   = 'Dog'
    /Fish/  = 'Fish'
    /Water/ = 'Water'  
    /Tea/   = 'Tea'
    /Milk/  = 'Milk' 
    /Coffee/ +
            = 'Coffee'
    /Beer/  = 'Beer'

* <Solve VS> == VS
*
* VS ::= (S(/0/../16/)R (E(/1/../15/)R) ET '=' VX)+
* ET ::= (VH)*
* VX ::= VH | /Impossible/
* VH ::= (V1) (V2) (V3) (V4) (V5)
* V1 ::= /Home/ /1/ /Color/ VC /Nationality/ VN /Cigarettes/ VG
*        /Pet/ VP /Drink/ VD
* V2 ::= /Home/ /2/ /Color/ VC /Nationality/ VN /Cigarettes/ VG
*        /Pet/ VP /Drink/ VD
* V3 ::= /Home/ /3/ /Color/ VC /Nationality/ VN /Cigarettes/ VG
*        /Pet/ VP /Drink/ VD
* V4 ::= /Home/ /4/ /Color/ VC /Nationality/ VN /Cigarettes/ VG
*        /Pet/ EP /Drink/ ED
* V5 ::= /Home/ /5/ /Color/ VC /Nationality/ VN /Cigarettes/ VG
*        /Pet/ VP /Drink/ VD
* VC ::= /Yellow/ | /Blue/ | /Red/ | /Green/ | /White/ | '???'
* VN ::= /Norwegian/ | /Dane/ | /Englishman/ | /German/ | /Swede/ |
*        '???'
* VG ::= /Dunhill/ | /Rothmans/ | /PallMall/ | /Marlboro/ |
*        /Winfield/ | '???'
* VP ::= /Cat/ | /Horse/ | /Bird/ | /Fish/ | /Dog/ | '???'
* VD ::= /Water/ | /Tea/ | /Milk/ | /Coffee/ | /Beer/ | '???'
Solve {
  /* Возврат к предыдущему правилу */
  e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' e.Table) (s.Rule (e.Rules) '=' Impossible) =
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.PrevRule (e.PrevRules) e.Tables '=' Impossible)>;
  /* Переход к следующему применению правила */
  e.Solve-B (s.Rule (e.Rules) (e.Table) e.RestTables '=' Impossible) =
    <Rp Steps '=' <Inc <Cp Steps>>>
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    <Solve e.Solve-B (s.Rule (e.Rules) e.RestTables '=' e.Table)>;
  /* Решение найдено */
  e.Solve-B (s.Rule () e.Tables '=' e.Table) =
    <Rp Steps '=' <Inc <Cp Steps>>>
    <Rp StepsBack '=' <Inc <Cp StepsBack>>>
    e.Solve-B (s.Rule () e.Tables '=' e.Table) (16 () '=' <ApplyRule <Rule 16> e.Table>);  
  /* Переход к следующему правилу */  
  e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table),
  <FindMinRule (e.Rules) e.Table>: s.MinRule,
  e.Rules: e.Rules-B s.MinRule e.Rules-E,
  <Br RuleTables '='>
  <ApplyRule <Rule s.MinRule> e.Table>
  <Dg RuleTables>: 
  {
    (e.NewTable) e.RestNewTables =
      <Rp Steps '=' <Inc <Cp Steps>>>
      <Rp StepsBack '=' <Inc <Cp StepsBack>>>
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' e.Table) (s.MinRule (e.Rules-B e.Rules-E) e.RestNewTables '=' e.NewTable)>;
    =
      <Solve e.Solve-B (s.Rule (e.Rules) e.Tables '=' Impossible)>
  }      
}

/*

<FindMinRule (e.Rules) e.Table> == s.Rule

e.Rules ::= s.Rule+
s.Rule ::= s.NUMBER
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Dane | Englishman | German | Swede | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Pet ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/
FindMinRule {
  (s.Rule) e.Table =
    s.Rule;
  (s.Rule e.RestRules) e.Table,
  <Br RuleTables '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg RuleTables>>: s.MinLen e.Tables =
    <FindMinRule-Aux s.MinLen s.Rule (e.RestRules) e.Table>
}

FindMinRule-Aux {
  0 s.MinRule (e.Rules) e.Table =
    s.MinRule;
  s.MinLen s.MinRule () e.Table =
    s.MinRule;
  s.MinLen s.MinRule (s.Rule e.RestRules) e.Table,
  <Br RuleTables '='>
  <ApplyRule <Rule s.Rule> e.Table>
  <Lenw <Dg RuleTables>>: s.LenRule e.Tables,
  <MinRule (s.MinLen s.MinRule) (s.LenRule s.Rule)>: (s.NewMinLen s.NewMinRule) =
    <FindMinRule-Aux s.NewMinLen s.NewMinRule (e.RestRules) e.Table>
}

/*

<MinRule t.MinRule t.Rule> == t.NewMinRule

t.MinRule, t.Rule, t.NewMinRule ::= (s.Len s.Rule)
s.Len, s.Rule ::= s.NUMBER

*/
MinRule {
  (s.MinLen s.MinRule) (s.LenRule s.Rule),
  <Compare s.MinLen s.LenRule>: '+' =
    (s.LenRule s.Rule);
  (s.MinLen s.MinRule) (s.LenRule s.Rule) =
    (s.MinLen s.MinRule)
}

/*

<ApplyRule e.Rule e.Table> ==

e.Rule ::= s.Predicate e.Object e.Object | Fish
s.Predicate ::= Member | Left  | Nextto
e.Object ::= Color s.Color | Nationality s.Nationality | Cigarettes s.Cigarettes | Pet s.Pet | Drink s.Drink 
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Dane | Englishman | German | Swede
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
s.Pet ::= Cat | Horse | Bird | Fish | Dog
s.Drink ::= Water | Tea | Milk | Coffee | Beer
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Color ::= s.Color | '???'
e.Nationality ::= s.Nationality | '???'
e.Cigarettes ::= s.Cigarettes | '???'
e.Pet ::= s.Pet | '???'
e.Drink ::= s.Drink | '???'

*/
ApplyRule {
  /* Member - 2 объекта в одном доме */
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;   
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table,
  <Exist s.Category1 s.Object1 e.Table>: True,
  <Exist s.Category2 s.Object2 e.Table>: True =
    ; 
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 '???' e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;  
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.OtherObject2 e.Home-E) e.Table-E =
    ;    
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 '???' e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)>;
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.OtherObject1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E =
    ;  
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 '???' e.Home-M s.Category2 '???' e.Home-E) e.Table-E,
  <Rp RuleTables '='
    <Cp RuleTables>
    (e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-M s.Category2 s.Object2 e.Home-E) e.Table-E)
  >: False =
    ;
  Member s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    ;
  /* Left - 1 объект в доме слева дома 2 объекта */
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;   
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table,
  <Exist s.Category1 s.Object1 e.Table>: True,
  <Exist s.Category2 s.Object2 e.Table>: True =
    ; 
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 '???' e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;  
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.OtherObject1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E =
    ;
  Left s.Category1 s.Object1 s.Category2 s.Object2
  (e.Home-B s.Category2 s.Object2 e.Home-E) e.Table-E =
    ;      
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 '???' e.HomeR-E) e.Table-E =
    <Rp RuleTables '=' (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>;
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.OtherObject2 e.HomeR-E) e.Table-E =
    ;
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.Home-B s.Category1 s.Object1 e.Home-E) =
    ;  
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table-B (e.HomeL-B s.Category1 '???' e.HomeL-E) (e.HomeR-B s.Category2 '???' e.HomeR-E) e.Table-E,
  <Rp RuleTables '=' <Cp RuleTables> (e.Table-B (e.HomeL-B s.Category1 s.Object1 e.HomeL-E) (e.HomeR-B s.Category2 s.Object2 e.HomeR-E) e.Table-E)>: False =
    ;
  Left s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    ;
  /* Nextto - 2 объекта в соседних домах */
  Nextto s.Category1 s.Object1 s.Category2 s.Object2
  e.Table =
    <ApplyRule Left s.Category1 s.Object1 s.Category2 s.Object2 e.Table>
    <Br RuleTablesTemp '=' <Cp RuleTables>>
    <Rp RuleTables '='>
    <ApplyRule Left s.Category2 s.Object2 s.Category1 s.Object1 e.Table>
    <Rp RuleTables '=' <Dg RuleTablesTemp> <Cp RuleTables>>;
  /* Fish - рыба - пятое животное */
  Fish
  e.Table-B (e.Home-B Pet '???' e.Home-E) e.Table-E =
    e.Table-B (e.Home-B Pet Fish e.Home-E) e.Table-E
}

/*

<Exist e.Object e.Table> == True | False

e.Object ::= Color s.Color | Nationality s.Nationality | Cigarettes s.Cigarettes | Pet s.Pet | Drink s.Drink 
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Color ::= s.Color | '???'
s.Color ::= Yellow | Blue | Red | Green | White
e.Nationality ::= s.Nationality | '???'
s.Nationality ::= Norwegian | Dane | Englishman | German | Swede
e.Cigarettes ::= s.Cigarettes | '???'
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield
e.Pet ::= s.Pet | '???'
s.Pet ::= Cat | Horse | Bird | Fish | Dog
e.Drink ::= s.Drink | '???'
s.Drink ::= Water | Tea | Milk | Coffee | Beer

*/
Exist {
  s.Category s.Object e.Table-B (e.Home-B s.Category s.Object e.Home-E) e.Table-E =
    True;
  s.Category s.Object e.Table =
    False  
}

/*

<Answer e.Table> == e.NationalityText

e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Pet s.Pet Drink s.Drink
e.Home2 ::= Home 2 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Pet s.Pet Drink s.Drink
e.Home3 ::= Home 3 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Pet s.Pet Drink s.Drink
e.Home4 ::= Home 4 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Pet s.Pet Drink s.Drink
e.Home5 ::= Home 5 Color s.Color Nationality s.Nationality Cigarettes s.Cigarettes Pet s.Pet Drink s.Drink
s.Color ::= Yellow | Blue | Red | Green | White
s.Nationality ::= Norwegian | Dane | Englishman | German | Swede 
s.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield 
s.Pet ::= Cat | Horse | Bird | Fish | Dog 
s.Drink ::= Water | Tea | Milk | Coffee | Beer 
e.NationalityText ::= 'Норвежец'  | 'Датчанин'  |  'Англичанин' | 'Немец' | 'Швед'

*/
Answer {
  e.Table-B (e.Home-B Nationality s.Nationality e.Home-M Pet Fish e.Home-E) e.Table-E = 
    <ObjectText s.Nationality>
}    

/*

<DoMapSolve t.RuleSolve> ==

t.RuleSolve ::= (s.Rule (e.Rules) e.Tables '=' e.Table)
s.Rules ::= s.Rule*
s.Rule ::= s.NUMBER
e.Tables ::= (e.Table)*
e.Table ::= (e.Home1) (e.Home2) (e.Home3) (e.Home4) (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Dane | Englishman | German | Swede | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Pet ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/

DoMapSolve {
  (s.Rule (e.Rules) e.Tables '=' e.Table) =
    <TreeSolveRule ('Подсказка ' <Symb s.Rule>) <RuleText s.Rule>>
    <Map DoMapTable e.Table>
}

/*

<DoMapTable t.Table> ==

t.Table ::= (e.Home1) | (e.Home2) | (e.Home3) | (e.Home4) | (e.Home5)
e.Home1 ::= Home 1 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home2 ::= Home 2 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home3 ::= Home 3 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home4 ::= Home 4 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Home5 ::= Home 5 Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink
e.Color ::= Yellow | Blue | Red | Green | White | '???'
e.Nationality ::= Norwegian | Dane | Englishman | German | Swede | '???'
e.Cigarettes ::= Dunhill | Rothmans | PallMall | Marlboro | Winfield | '???'
e.Pet ::= Cat | Horse | Bird | Fish | Dog | '???'
e.Drink ::= Water | Tea | Milk | Coffee | Beer | '???'

*/

DoMapTable {
  (Home s.Home Color e.Color Nationality e.Nationality Cigarettes e.Cigarettes Pet e.Pet Drink e.Drink) =
    <TreeSolveTable
      <Symb s.Home>
      (<ObjectText e.Color>)
      (<ObjectText e.Nationality>)
      (<ObjectText e.Cigarettes>)
      (<ObjectText e.Pet>)
      <ObjectText e.Drink>
    >
}

$ENTRY Go {
  , 
  <GTKInit>
  <Help>
  <Br Steps '=' 0>
  <Br StepsBack '=' 0>
  <Solve    
    (0 (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) '='
      (Home 1 Color '???' Nationality '???' Cigarettes '???' Pet '???' Drink '???')
      (Home 2 Color '???' Nationality '???' Cigarettes '???' Pet '???' Drink '???')
      (Home 3 Color '???' Nationality '???' Cigarettes '???' Pet '???' Drink '???')
      (Home 4 Color '???' Nationality '???' Cigarettes '???' Pet '???' Drink '???')
      (Home 5 Color '???' Nationality '???' Cigarettes '???' Pet '???' Drink '???')
    )
  >: e.Solve-B (16 () '=' e.Table) =
    <MessageBox 'Вопрос: Чья рыба?\nОтвет: ' <Answer e.Table> ' держит рыбу.'>
    <TreeSolveNew>
    <Map DoMapSolve e.Solve-B (16 () '=' e.Table)>
    <TreeSolveView>
    <MessageBox
      'Количество шагов без возвратов: ' <Symb <Dg Steps>> '.\n'
      'Количество шагов с возвратами: ' <Symb <Dg StepsBack>> '.'
    >
}
